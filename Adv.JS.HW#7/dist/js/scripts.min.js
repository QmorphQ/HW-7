"use strict";class Card{constructor(e,t,s=!0){this.card_selector=e,this.self_close=s,this.card_htmlElement=t(this.card_selector)}create_window(e,t="afterbegin"){try{document.querySelector(`.${e}`).insertAdjacentHTML(t,this.card_htmlElement),this.add_onClick_close_card()}catch(e){console.log(e)}}add_onClick_close_card(){if(this.self_close){let e=document.querySelector(`.${this.card_selector}__delete`);e.addEventListener("click",e=>{e.target.closest("."+this.card_selector).remove()})}}insert_text(e,t){return document.querySelector("."+e).insertAdjacentText("afterbegin",t)}}let clock=function(e){return clock=new function(){this.name="clock",this.id_selector=e,this.element_onPage=document.querySelector(`#${this.id_selector}`),this.intervalID=0,this.turn_on=()=>{this.intervalID=setInterval(()=>{clock.element_onPage.innerHTML=`${(new Date).getHours()<10?"0"+(new Date).getHours():(new Date).getHours()} : ${(new Date).getMinutes()<10?"0"+(new Date).getMinutes():(new Date).getMinutes()}`},1e3)},this.turn_off=()=>clearInterval(this.intervalID)}},url="https://ajax.test-danit.com/api/json",target_data={users:"users",posts:"posts"},method={get:"GET",post:"POST",delete:"DELETE",put:"PUT"};const users_targetProp=["name","email","id"],card_selector="card",window_selector="window",element_toAdjustCards="main";let users,posts,url_users=url+`/${target_data.users}`,url_posts=url+`/${target_data.posts}`;const load_htmlString=`<div class="spinner-container">
<svg class="spinner" viewBox="0 0 50 50">
    <circle class="path" cx="25" cy="25" r="20" fill="none" stroke-width="5"></circle>
  </svg>
</div>`,btn_addPost=document.querySelector(".header__btn"),log=e=>console.log(e),insert_text=function(e,t){return document.querySelector("."+e).insertAdjacentText("afterbegin",t)},send_request=function(e,t,s=!1){switch(t){case"GET":return fetch(e).then(function(e){return e.json()});case"DELETE":return fetch(e,{method:"DELETE"});case"POST":return fetch(e,{method:t,body:JSON.stringify(s),headers:{"Content-Type":"application/json; charset=UTF-8"}});case"PUT":return fetch(e,{method:t,body:JSON.stringify(s),headers:{"Content-type":"application/json; charset=UTF-8"}})}};function create_obj(t,...e){let s={};return e.forEach(e=>s[e]=t[e]),s}const add_htmlElementOnPage=function(e,t,s="afterbegin"){return document.querySelector(e).insertAdjacentHTML(s,t)},remove_node=function(t,e=!1){try{document.querySelector(t).remove()}catch(e){e instanceof TypeError?console.log(`%c Probably incorrect selector name or there is no element with ${t} selector on page.`,"background-color:orange; color: blue"):console.log(e)}finally{if(e)return document.querySelector(t)?console.log(`%c ${t} exist`,"background-color:orange; color: blue"):console.log(`%c There is no element with ${t} selector`,"background-color:orange; color: blue")}};let alert_message=function(e){return`<div class="alert__window">${e}</div>`};clock("clock"),clock.turn_on(),add_htmlElementOnPage("."+element_toAdjustCards,load_htmlString),Promise.all([send_request(url_users,method.get),send_request(url_posts,method.get)]).then(function(e){let[t,s]=[...e];return users=t.sort((e,t)=>e.id-t.id).map(e=>create_obj(e,...users_targetProp)),posts=s.map(e=>create_obj(e,...Object.keys(s[0]))),[users,posts]}).then(function([t,e]){return e.map(e=>new Post(e,t,card_selector))}).then(function(e){e.forEach(e=>e.create_card(element_toAdjustCards)),remove_node(".spinner-container"),document.body.addEventListener("click",t=>{t.target.hasAttribute("data-marker")&&send_request(`${url_posts}/${t.target.getAttribute("data-marker")}`,method.delete).then(function(e){console.log(e),e.status,e.ok,document.querySelector(`.card[data-id="${t.target.getAttribute("data-marker")}"]`)?document.querySelector(`.card[data-id="${t.target.getAttribute("data-marker")}"]`).remove():console.log("Processing: ",e)})})}),btn_addPost.addEventListener("click",e=>{let t=new Modal_Window(window_selector,window_htmlTemplate);t.create_window("main");let s=document.querySelector(".window__edit");s.addEventListener("click",e=>{var s=document.querySelector(".window__input-title"),r=document.querySelector(".window__input-text");if(s.value&&r.value){let t={title:s.value,body:r.value,userId:1,id:document.querySelectorAll('.card[data-userId="1"]').length};Promise.all([send_request(url_posts,method.post,t),send_request(url_users,method.get)]).then(function(e){var[,e]=[...e];return e}).then(e=>new Post(t,e,card_selector)).then(e=>e.create_card(element_toAdjustCards)).then(function(e){remove_node("."+window_selector)})}})}),document.querySelector(".main").addEventListener("click",e=>{if("card__edit"===e.target.className){let r=document.querySelector(`.card__submit[data-post="${e.target.getAttribute("data-post")}"]`);r.style.display="block";let n=e.target.closest("."+card_selector),a=e.target.getAttribute("data-post"),o=document.querySelector(`.card__title[data-post="${a}"]`),c=document.querySelector(`.card__text[data-post="${a}"]`),l={post_id:a,title_content:o.value,text_content:c.value};o.setAttribute("contenteditable",!0),c.setAttribute("contenteditable",!0),r.addEventListener("click",function e(t){o.setAttribute("contenteditable",!1),c.setAttribute("contenteditable",!1),r.removeEventListener("click",e),r.style.display="none";var s={id:a,title:o.value,body:c.value,userId:n.getAttribute("data-userId")};send_request(url_posts+"/"+s.id,method.put,s).then(function(e){if(200!==e.status||!e.ok)return o.innerHTML(l.title_content),c.innerHTML(l.text_content),console.log("Try again later")})})}});let window_htmlTemplate=e=>`
  <div class="window">
  <a class="${e}__delete"></a>
  <div class="${e}__header">
      <h2 class="${e}__title"><input class="${e}__input-title"></h2>
      <a class="${e}__edit">Submit</a>
    </div>
    <div class="${e}__main">
      <div class="${e}__text"><textarea class="${e}__input-text" name="" id="" cols="30" rows="10"></textarea></div>
    </div>
    <div class="${e}__footer">
    </div>
</div>  `;class Modal_Window extends Card{}let post_htmlTemplate=(e,t,s)=>`
    <div class="${e}" data-id="${t}" data-userId="${s}">
      <div class="${e}__header">
        <a class="${e}__edit" data-post="${t}"></a>
        <h2 class="${e}__title" data-post="${t}" contenteditable=false></h2>
        <a class="${e}__delete" data-marker="${t}"></a>
      </div>
      <div class="${e}__main">
        <p class="${e}__text" data-post="${t}" contenteditable=false></p>
      </div>
      <div class="${e}__footer">
        <span class="${e}__submit" data-post="${t}">submit changes</span>
        <span class="${e}__name"></span>
        <span>||</span>
        <span class="${e}__email"></span>
        <span class="${e}__date">${(new Date).getDate()}.${(new Date).getMonth()}.${(new Date).getHours()}.${(new Date).getMinutes()}</span>
      </div>
    </div>
  `;class Post extends Card{constructor(e,t,s,r=!1){super(s,post_htmlTemplate),this.title=e.title,this.userId=e.userId,this.text=e.body,this.post_id=e.id,this.name=t.find(e=>e.id===this.userId).name,this.email=t.find(e=>e.id===this.userId).email,this.self_close=r,this.card_htmlElement=post_htmlTemplate(this.card_selector,this.post_id,this.userId)}create_card(e,t="afterbegin"){try{document.querySelector(`.${e}`).insertAdjacentHTML(t,this.card_htmlElement),insert_text(`${this.card_selector}__title`,this.title),insert_text(`${this.card_selector}__text`,this.text),insert_text(`${this.card_selector}__name`,this.name),insert_text(`${this.card_selector}__email`,this.email),this.add_onClick_close_card()}catch(e){console.log(e)}}}